{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["mockData","QueryApi","query","URLSearchParams","useLocation","search","bks","get","fmt","download","substring","to","BP","books","format","exact","path","Home","About","Books","file","content","type","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAoBA,IAAMA,EAAQ,oCAId,SAASC,IACP,IAAIC,EARG,IAAIC,gBAAgBC,cAAcC,QASrCC,EAAQJ,EAAMK,IAAI,SAClBC,EAAQN,EAAMK,IAAI,UActB,OAZY,OAARC,GACW,OAARF,IACU,QAARE,EACHC,EAAS,aAAaT,GAEJ,WAARQ,GACVC,EAAS,aAAcT,EAASU,UAAU,EAAE,KAOhD,6BACE,6BACE,gDACA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,0BAAT,iBAEF,4BACA,kBAAC,IAAD,CAAMA,GAAG,wCAAT,iCAEA,4BACE,kBAAC,IAAD,CAAMA,GAAG,yCAAT,gCAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,qBAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,KAAT,UAIJ,kBAACC,EAAD,CAAIC,MAAOX,EAAMK,IAAI,SAAUO,OAAQZ,EAAMK,IAAI,YASjD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,KAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,qBACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,YACV,kBAACG,EAAD,UAQZ,SAASA,IACP,OACE,6BACE,6CAKN,SAASF,IACP,OACE,6BACE,qCAKN,SAASC,IACP,OACE,6BACE,sCAKN,SAASN,EAAT,GAA6E,IAA/DC,EAA8D,EAA9DA,MAAOC,EAAuD,EAAvDA,OACnB,OACE,6BACGD,EACC,6BACA,4CACe,uCADf,4BACgEA,EADhE,IAC4E,6BAD5E,gBAEe,wCAFf,4BAEiEC,EAFjE,KAIA,kBAAC,IAAD,CAAUM,KAAK,UAAUC,QAAsB,QAAXP,EAAmBd,EAAUA,EAASU,UAAU,EAAE,IACpF,4BAAQY,KAAK,UAAb,iBAKF,uEAOR,SAASb,EAASc,EAAkBC,GAClC,IAAIC,EAAUC,SAASC,cAAc,KACrCF,EAAQG,aAAa,OAAQ,iCAAmCC,mBAAmBL,IACnFC,EAAQG,aAAa,WAAYL,GAEjCE,EAAQK,MAAMC,QAAU,OACxBL,SAASM,KAAKC,YAAYR,GAE1BA,EAAQS,QAERR,SAASM,KAAKG,YAAYV,GAMbW,MAjJf,WACE,OACE,kBAAC,IAAD,KACE,kBAACnC,EAAD,QCIcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa42ca9f.chunk.js","sourcesContent":["import React from 'react';\nimport {BrowserRouter as Router,Link,Route,Switch,useLocation} from 'react-router-dom';\nimport Download from '@axetroy/react-download';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <QueryApi />\n    </Router>\n  );\n}\n\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst mockData = `one,two,three\nalpha,beta,gamma\n`;\n\nfunction QueryApi() {\n  let query = useQuery();\n  let bks   = query.get(\"books\");\n  let fmt   = query.get(\"format\");\n\n  if (fmt !== null) {\n    if ( bks !== null ) {\n      if ( fmt === \"csv\" ) {\n        download(\"mytest.csv\",mockData);\n        //return (<div></div>);\n      } else if ( fmt === \"string\" ) {\n        download(\"mytest.txt\", mockData.substring(0,3) );\n        //return (<div></div>);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        <h2>Book Package API</h2>\n        <ul>\n          <li>\n            <Link to=\"/rrouter?books=gen,exo\">Book Package</Link>\n          </li>\n          <li>\n          <Link to=\"/rrouter?books=gen,exo&format=string\">Book Package Total as string</Link>            \n          </li>\n          <li>\n            <Link to=\"/rrouter?books=1jn,2jn,3jn&format=csv\">Book Package Details as CSV</Link>\n          </li>\n          <li>\n            <Link to=\"/rrouter/download\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n        </ul>\n\n        <BP books={query.get(\"books\")} format={query.get(\"format\")} />\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/rrouter/download\">\n            <About />\n          </Route>\n          <Route path=\"/rrouter\">\n            <Books />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nfunction Books() {\n  return (\n    <div>\n      <h2>Book Package</h2>\n    </div>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nfunction BP({ books, format }: {books: string|null; format: string|null; }) {\n  return (\n    <div>\n      {books ? (\n        <div>\n        <h3>\n          The value of <code>books</code> in the query string is &quot;{books}&quot;<br/>\n          The value of <code>format</code> in the query string is &quot;{format}&quot;\n        </h3>\n        <Download file=\"test.md\" content={ (format === 'csv' ? mockData: mockData.substring(0,3)) }>\n          <button type=\"button\">Export Data</button>\n        </Download>\n        {/*download(\"mytest.txt\",mockData)*/}\n        </div>\n      ) : (\n        <h3>There are no books in the query string</h3>\n      )}\n    </div>\n  );\n}\n\n\nfunction download(filename: string, text: string) {\n  let element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\n// Start file download.\n//download(\"hello.txt\",\"This is the content of my file :)\");\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}